{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Getting started with DoWhy: A simple example\n",
    "This is a quick introduction to the DoWhy causal inference library.\n",
    "We will load in a sample dataset and estimate the causal effect of a (pre-specified)treatment variable on a (pre-specified) outcome variable.\n",
    "\n",
    "First, let us add the required path for Python to find the DoWhy code and load all required packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os, sys\n",
    "sys.path.append(os.path.abspath(\"../../\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check the python version. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.5.2 (default, Nov 12 2018, 13:43:14) \n",
      "[GCC 5.4.0 20160609]\n"
     ]
    }
   ],
   "source": [
    "print(sys.version)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import dowhy\n",
    "from dowhy.do_why import CausalModel\n",
    "import dowhy.datasets "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let us load a dataset. For simplicity, we simulate a dataset with linear relationships between common causes and treatment, and common causes and outcome. \n",
    "\n",
    "Beta is the true causal effect. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Z0        Z1        X0        X1        X2        X3        X4    v  \\\n",
      "0  1.0  0.644552 -0.313054 -0.043481 -0.035456 -1.633671 -1.428568  1.0   \n",
      "1  1.0  0.166371  0.146926 -2.036680 -0.983486 -0.552480 -0.642626  0.0   \n",
      "2  1.0  0.334068 -0.732279 -0.948639 -0.654771 -1.894756 -1.117160  0.0   \n",
      "3  1.0  0.814735  1.736889 -2.419987  1.508327 -0.830098 -1.536257  1.0   \n",
      "4  1.0  0.226584 -0.368021 -1.863268  1.147728  0.177494 -1.264160  1.0   \n",
      "\n",
      "           y  \n",
      "0   2.091258  \n",
      "1  -5.146495  \n",
      "2 -11.044251  \n",
      "3   6.337831  \n",
      "4   7.642088  \n",
      "digraph { v ->y; U[label=\"Unobserved Confounders\"]; U->v; U->y;X0-> v; X1-> v; X2-> v; X3-> v; X4-> v;X0-> y; X1-> y; X2-> y; X3-> y; X4-> y;Z0-> v; Z1-> v;}\n",
      "\n",
      "\n",
      "graph[directed 1node[ id \"v\" label \"v\"]node[ id \"y\" label \"y\"]node[ id \"Unobserved Confounders\" label \"Unobserved Confounders\"]edge[source \"v\" target \"y\"]edge[source \"Unobserved Confounders\" target \"v\"]edge[source \"Unobserved Confounders\" target \"y\"]node[ id \"X0\" label \"X0\"] edge[ source \"X0\" target \"v\"] node[ id \"X1\" label \"X1\"] edge[ source \"X1\" target \"v\"] node[ id \"X2\" label \"X2\"] edge[ source \"X2\" target \"v\"] node[ id \"X3\" label \"X3\"] edge[ source \"X3\" target \"v\"] node[ id \"X4\" label \"X4\"] edge[ source \"X4\" target \"v\"]edge[ source \"X0\" target \"y\"] edge[ source \"X1\" target \"y\"] edge[ source \"X2\" target \"y\"] edge[ source \"X3\" target \"y\"] edge[ source \"X4\" target \"y\"]node[ id \"Z0\" label \"Z0\"] edge[ source \"Z0\" target \"v\"] node[ id \"Z1\" label \"Z1\"] edge[ source \"Z1\" target \"v\"]]\n"
     ]
    }
   ],
   "source": [
    "data = dowhy.datasets.linear_dataset(beta=10,\n",
    "        num_common_causes=5,\n",
    "        num_instruments = 2,\n",
    "        num_samples=10000, \n",
    "        treatment_is_binary=True)\n",
    "df = data[\"df\"]\n",
    "print(df.head())\n",
    "print(data[\"dot_graph\"])\n",
    "print(\"\\n\")\n",
    "print(data[\"gml_graph\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that we are using a pandas dataframe to load the data. At present, DoWhy only supports pandas dataframe as input."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interface 1 (recommended): Input causal graph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now input a causal graph in the GML graph format (recommended). You can also use the DOT format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.do_why:Model to find the causal effect of treatment ['v'] on outcome ['y']\n"
     ]
    }
   ],
   "source": [
    "# With graph\n",
    "model=CausalModel(\n",
    "        data = df,\n",
    "        treatment=data[\"treatment_name\"],\n",
    "        outcome=data[\"outcome_name\"],\n",
    "        graph=data[\"gml_graph\"]\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.view_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import Image, display\n",
    "display(Image(filename=\"causal_model.png\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above causal graph shows the assumptions encoded in the causal model. We can now use this graph to first identify \n",
    "the causal effect (go from a causal estimand to a probability expression), and then estimate the causal effect."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**DoWhy philosophy: Keep identification and estimation separate**\n",
    "\n",
    "Identification can be achieved without access to the data, acccesing only the graph. This results in an expression to be computed. This expression can then be evaluated using the available data in the estimation step.\n",
    "It is important to understand that these are orthogonal steps.\n",
    "\n",
    "* Identification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_identifier:Common causes of treatment and outcome:['X3', 'X1', 'X0', 'X4', 'Unobserved Confounders', 'X2']\n",
      "WARNING:dowhy.causal_identifier:There are unobserved common causes. Causal effect cannot be identified.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARN: Do you want to continue by ignoring these unobserved confounders? [y/n] y\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_identifier:Instrumental variables for treatment and outcome:['Z1', 'Z0']\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimand type: ate\n",
      "### Estimand : 1\n",
      "Estimand name: backdoor\n",
      "Estimand expression:\n",
      "d                                \n",
      "──(Expectation(y|X3,X1,X0,X4,X2))\n",
      "dv                               \n",
      "Estimand assumption 1, Unconfoundedness: If U→v and U→y then P(y|v,X3,X1,X0,X4,X2,U) = P(y|v,X3,X1,X0,X4,X2)\n",
      "### Estimand : 2\n",
      "Estimand name: iv\n",
      "Estimand expression:\n",
      "Expectation(Derivative(y, Z1)/Derivative(v, Z1))\n",
      "Estimand assumption 1, Exclusion: If we remove {Z1,Z0}→v, then ¬(Z1,Z0→y)\n",
      "Estimand assumption 2, As-if-random: If U→→y then ¬(U →→Z1,Z0)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "identified_estimand = model.identify_effect()\n",
    "print(identified_estimand)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to disable the warning for ignoring unobserved confounders, you can add a parameter flag ( *proceed\\_when\\_unidentifiable* ). The same parameter can also be added when instantiating the CausalModel object. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_identifier:Common causes of treatment and outcome:['X3', 'X1', 'X0', 'X4', 'Unobserved Confounders', 'X2']\n",
      "WARNING:dowhy.causal_identifier:There are unobserved common causes. Causal effect cannot be identified.\n",
      "INFO:dowhy.causal_identifier:Continuing by ignoring these unobserved confounders because proceed_when_unidentifiable flag is True.\n",
      "INFO:dowhy.causal_identifier:Instrumental variables for treatment and outcome:['Z1', 'Z0']\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimand type: ate\n",
      "### Estimand : 1\n",
      "Estimand name: backdoor\n",
      "Estimand expression:\n",
      "d                                \n",
      "──(Expectation(y|X3,X1,X0,X4,X2))\n",
      "dv                               \n",
      "Estimand assumption 1, Unconfoundedness: If U→v and U→y then P(y|v,X3,X1,X0,X4,X2,U) = P(y|v,X3,X1,X0,X4,X2)\n",
      "### Estimand : 2\n",
      "Estimand name: iv\n",
      "Estimand expression:\n",
      "Expectation(Derivative(y, Z1)/Derivative(v, Z1))\n",
      "Estimand assumption 1, Exclusion: If we remove {Z1,Z0}→v, then ¬(Z1,Z0→y)\n",
      "Estimand assumption 2, As-if-random: If U→→y then ¬(U →→Z1,Z0)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "identified_estimand = model.identify_effect(proceed_when_unidentifiable=True)\n",
    "print(identified_estimand)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_estimator:INFO: Using Propensity Score Stratification Estimator\n",
      "INFO:dowhy.causal_estimator:b: y~v+X3+X1+X0+X4+X2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Causal Estimate ***\n",
      "\n",
      "## Target estimand\n",
      "Estimand type: ate\n",
      "### Estimand : 1\n",
      "Estimand name: backdoor\n",
      "Estimand expression:\n",
      "d                                \n",
      "──(Expectation(y|X3,X1,X0,X4,X2))\n",
      "dv                               \n",
      "Estimand assumption 1, Unconfoundedness: If U→v and U→y then P(y|v,X3,X1,X0,X4,X2,U) = P(y|v,X3,X1,X0,X4,X2)\n",
      "### Estimand : 2\n",
      "Estimand name: iv\n",
      "Estimand expression:\n",
      "Expectation(Derivative(y, Z1)/Derivative(v, Z1))\n",
      "Estimand assumption 1, Exclusion: If we remove {Z1,Z0}→v, then ¬(Z1,Z0→y)\n",
      "Estimand assumption 2, As-if-random: If U→→y then ¬(U →→Z1,Z0)\n",
      "\n",
      "## Realized estimand\n",
      "b: y~v+X3+X1+X0+X4+X2\n",
      "## Estimate\n",
      "Value: 9.926668762072646\n",
      "\n",
      "Causal Estimate is 9.926668762072646\n"
     ]
    }
   ],
   "source": [
    "causal_estimate = model.estimate_effect(identified_estimand,\n",
    "        method_name=\"backdoor.propensity_score_stratification\")\n",
    "print(causal_estimate)\n",
    "print(\"Causal Estimate is \" + str(causal_estimate.value))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interface 2: Specify common causes and instruments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:dowhy.do_why:Causal Graph not provided. DoWhy will construct a graph based on data inputs.\n",
      "INFO:dowhy.do_why:Model to find the causal effect of treatment ['v'] on outcome ['y']\n"
     ]
    }
   ],
   "source": [
    "# Without graph                                       \n",
    "model= CausalModel(                             \n",
    "        data=df,                                      \n",
    "        treatment=data[\"treatment_name\"],             \n",
    "        outcome=data[\"outcome_name\"],                 \n",
    "        common_causes=data[\"common_causes_names\"])                         "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.view_model()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"causal_model.png\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We get the same causal graph. Now identification and estimation is done as before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_identifier:Common causes of treatment and outcome:['X3', 'X1', 'X0', 'U', 'X4', 'X2']\n",
      "WARNING:dowhy.causal_identifier:There are unobserved common causes. Causal effect cannot be identified.\n",
      "INFO:dowhy.causal_identifier:Continuing by ignoring these unobserved confounders because proceed_when_unidentifiable flag is True.\n",
      "INFO:dowhy.causal_identifier:Instrumental variables for treatment and outcome:[]\n"
     ]
    }
   ],
   "source": [
    "identified_estimand = model.identify_effect(proceed_when_unidentifiable=True)                         "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_estimator:INFO: Using Propensity Score Stratification Estimator\n",
      "INFO:dowhy.causal_estimator:b: y~v+X3+X1+X0+X4+X2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Causal Estimate ***\n",
      "\n",
      "## Target estimand\n",
      "Estimand type: ate\n",
      "### Estimand : 1\n",
      "Estimand name: backdoor\n",
      "Estimand expression:\n",
      "d                                \n",
      "──(Expectation(y|X3,X1,X0,X4,X2))\n",
      "dv                               \n",
      "Estimand assumption 1, Unconfoundedness: If U→v and U→y then P(y|v,X3,X1,X0,X4,X2,U) = P(y|v,X3,X1,X0,X4,X2)\n",
      "### Estimand : 2\n",
      "Estimand name: iv\n",
      "No such variable found!\n",
      "\n",
      "## Realized estimand\n",
      "b: y~v+X3+X1+X0+X4+X2\n",
      "## Estimate\n",
      "Value: 9.926668762072646\n",
      "\n",
      "Causal Estimate is 9.926668762072646\n"
     ]
    }
   ],
   "source": [
    "estimate = model.estimate_effect(identified_estimand,\n",
    "                                 method_name=\"backdoor.propensity_score_stratification\")         \n",
    "print(estimate)\n",
    "print(\"Causal Estimate is \" + str(estimate.value))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Refuting the estimate\n",
    "\n",
    "Let us now look at ways of refuting the estimate obtained."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding a random common cause variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_estimator:INFO: Using Propensity Score Stratification Estimator\n",
      "INFO:dowhy.causal_estimator:b: y~v+X3+X1+X0+X4+X2+w_random\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Refute: Add a Random Common Cause\n",
      "Estimated effect:(9.926668762072646,)\n",
      "New effect:(9.82327794717962,)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "res_random=model.refute_estimate(identified_estimand, estimate, method_name=\"random_common_cause\")\n",
    "print(res_random)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding an unobserved common cause variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_estimator:INFO: Using Propensity Score Stratification Estimator\n",
      "INFO:dowhy.causal_estimator:b: y~v+X3+X1+X0+X4+X2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Refute: Add an Unobserved Common Cause\n",
      "Estimated effect:(9.926668762072646,)\n",
      "New effect:(9.021594981360023,)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "res_unobserved=model.refute_estimate(identified_estimand, estimate, method_name=\"add_unobserved_common_cause\",\n",
    "                                     confounders_effect_on_treatment=\"binary_flip\", confounders_effect_on_outcome=\"linear\",\n",
    "                                    effect_strength_on_treatment=0.01, effect_strength_on_outcome=0.02)\n",
    "print(res_unobserved)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Replacing treatment with a random (placebo) variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_estimator:INFO: Using Propensity Score Stratification Estimator\n",
      "INFO:dowhy.causal_estimator:b: y~placebo+X3+X1+X0+X4+X2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Refute: Use a Placebo Treatment\n",
      "Estimated effect:(9.926668762072646,)\n",
      "New effect:(-0.015934840427471245,)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "res_placebo=model.refute_estimate(identified_estimand, estimate,\n",
    "        method_name=\"placebo_treatment_refuter\", placebo_type=\"permute\")\n",
    "print(res_placebo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing a random subset of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_estimator:INFO: Using Propensity Score Stratification Estimator\n",
      "INFO:dowhy.causal_estimator:b: y~v+X3+X1+X0+X4+X2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Refute: Use a subset of data\n",
      "Estimated effect:(9.926668762072646,)\n",
      "New effect:(9.88091960254762,)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "res_subset=model.refute_estimate(identified_estimand, estimate,\n",
    "        method_name=\"data_subset_refuter\", subset_fraction=0.9)\n",
    "print(res_subset)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, the propensity score stratification estimator is reasonably robust to refutations.\n",
    "For reproducibility, you can add a parameter \"random_seed\" to any refutation method, as shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:dowhy.causal_estimator:INFO: Using Propensity Score Stratification Estimator\n",
      "INFO:dowhy.causal_estimator:b: y~v+X3+X1+X0+X4+X2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Refute: Use a subset of data\n",
      "Estimated effect:(9.926668762072646,)\n",
      "New effect:(9.934794761280186,)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "res_subset=model.refute_estimate(identified_estimand, estimate,\n",
    "        method_name=\"data_subset_refuter\", subset_fraction=0.9, random_seed = 1)\n",
    "print(res_subset)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
